
    public AnimationClip clip;
    public float climbingHorizontalOffset;
    private Vector2 topOfPlayer;
    private GameObject ledge;
    private float animationTime = .5f;
    private bool falling;
    private bool moved;
    [HideInInspector]
    public bool grabbingLedge;
    private Collider2D col;
    private Rigidbody2D rb;
    private Animator anim;

    private void Start()
    {
        col = GetComponent<Collider2D>();
        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        if (clip != null)
        {
            animationTime = clip.length;
        }
    }
    
    protected virtual void FixedUpdate()
    {
        CheckForLedge();
        LedgeHanging();
    }

    protected virtual void CheckForLedge()
    {
        if (!falling)
        {
            if (transform.localScale.x > 0)
            {
                topOfPlayer = new Vector2(col.bounds.max.x + .1f, col.bounds.max.y);
                RaycastHit2D hit = Physics2D.Raycast(topOfPlayer, Vector2.right, .2f);
                if (hit && hit.collider.gameObject.GetComponent<Ledge>())
                {
                    ledge = hit.collider.gameObject;
                    if (col.bounds.max.y < ledge.GetComponent<Collider2D>().bounds.max.y && col.bounds.max.y > ledge.GetComponent<Collider2D>().bounds.center.y)
                    {
                        grabbingLedge = true;
                        anim.SetBool("LedgeHanging", true);
                    }
                }
            }
            else
            {
                topOfPlayer = new Vector2(col.bounds.min.x - .1f, col.bounds.max.y);
                RaycastHit2D hit = Physics2D.Raycast(topOfPlayer, Vector2.left, .2f);
                if (hit && hit.collider.gameObject.GetComponent<Ledge>())
                {
                    ledge = hit.collider.gameObject;
                    if (col.bounds.max.y < ledge.GetComponent<Collider2D>().bounds.max.y && col.bounds.max.y > ledge.GetComponent<Collider2D>().bounds.center.y)
                    {
                        anim.SetBool("LedgeHanging", true);
                        grabbingLedge = true;
                    }
                }
            }
            if (ledge != null && grabbingLedge)
            {
                AdjustPlayerPosition();
                rb.velocity = Vector2.zero;
                rb.bodyType = RigidbodyType2D.Kinematic;
                GetComponent<movmentScript>().enabled = false;
            }
            else
            {
                rb.bodyType = RigidbodyType2D.Dynamic;
                GetComponent<movmentScript>().enabled = true;
            }
        }
    }

    protected virtual void LedgeHanging()
    {
        if (grabbingLedge && Input.GetAxis("Vertical") > 0)
        {
            anim.SetBool("LedgeHanging", false);
            if (transform.localScale.x > 0)
            {
                StartCoroutine(ClimbingLedge(new Vector2(transform.position.x + climbingHorizontalOffset, ledge.GetComponent<Collider2D>().bounds.max.y + col.bounds.extents.y), animationTime - .3f));
            }
            else
            {
                StartCoroutine(ClimbingLedge(new Vector2(transform.position.x - climbingHorizontalOffset, ledge.GetComponent<Collider2D>().bounds.max.y + col.bounds.extents.y), animationTime - .3f));
            }
        }
        if (grabbingLedge && Input.GetAxis("Vertical") < 0)
        {
            ledge = null;
            moved = false;
            grabbingLedge = false;
            anim.SetBool("LedgeHanging", false);
            falling = true;
            rb.bodyType = RigidbodyType2D.Dynamic;
            GetComponent<movmentScript>().enabled = true;
            Invoke("NotFalling", .5f);
        }
    }

    protected virtual IEnumerator ClimbingLedge(Vector2 topOfPlatform, float duration)
    {
        float time = 0;
        Vector2 startValue = transform.position;
        while (time < duration)
        {
           anim.SetBool("LedgeClimbing", true);
            transform.position = Vector2.Lerp(startValue, topOfPlatform, time / duration);
            time += Time.deltaTime;
            yield return null;
        }
        ledge = null;
        moved = false;
        grabbingLedge = false;
        anim.SetBool("LedgeClimbing", false);
    }

    protected virtual void AdjustPlayerPosition()
    {
        if (!moved)
        {
            moved = true;
            if (transform.localScale.x > 0)
            {
                transform.position = new Vector2((ledge.GetComponent<Collider2D>().bounds.min.x - col.bounds.extents.x) + ledge.GetComponent<Ledge>().hangingHorizontalOffset, (ledge.GetComponent<Collider2D>().bounds.max.y - col.bounds.extents.y - .5f) + ledge.GetComponent<Ledge>().hangingVerticalOffset);
            }
            else
            {
                transform.position = new Vector2((ledge.GetComponent<Collider2D>().bounds.max.x + col.bounds.extents.x) - ledge.GetComponent<Ledge>().hangingHorizontalOffset, (ledge.GetComponent<Collider2D>().bounds.max.y - col.bounds.extents.y - .5f) + ledge.GetComponent<Ledge>().hangingVerticalOffset);
            }
        }
    }

    protected virtual void NotFalling()
    {
        falling = false;
    }
}
