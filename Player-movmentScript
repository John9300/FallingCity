public class movmentScript : MonoBehaviour
{

    public static movmentScript instance;
    public ParticleSystem Dust;
    Rigidbody2D rb;
    [SerializeField] public float speed;
    public float jumpForce;
    bool isGrounded = false;
    public Transform isGroundChecker;
    public float checkGroundRadius;
    public LayerMask groundLayer;
    public float fallMultiplier = 2.5f;
    public float lowJumpMuliplier = 2f;
    public float rememberGroundedFor;
    float lastTimeGrounded;
    public int moreJumps = 1;
    int additionalJump;
    private bool facingRight;
    private GameObject[] players;
    private Animator anim;
    public float thrust = 10.0f;
    public string scenePassword;

     void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
        else
        {
            if(instance != this)
            {
                Destroy(gameObject);
            }
        }
        DontDestroyOnLoad(gameObject);
    }

    void Start()
    {
        anim = GetComponent<Animator>();
      facingRight = true;
        rb = GetComponent<Rigidbody2D>();
    }

    
    void Update()
    { 
        Move();
        Jump();
        CheckIfGrounded();
        BetterJump();   
    }
    
    void Move()
    {
        float x = Input.GetAxisRaw("Horizontal");
        float moveBy = x * speed;
        if (x  == 0)
        {
            anim.SetBool("run" , false);
        }
        else
        {
            anim.SetBool("run", true);
        }
       rb.velocity = new Vector2(moveBy, rb.velocity.y);
        Flip(x);
    }

    void Jump()
    {
        if (Input.GetKeyDown(KeyCode.Space) && (isGrounded  || Time.time - lastTimeGrounded <= rememberGroundedFor || additionalJump > 0))
        {
            rb.velocity = new Vector2(rb.velocity.x, jumpForce);
            additionalJump--;
            anim.SetTrigger("jump");
        }
    }
    
    void CheckIfGrounded()
    {
        Collider2D collider = Physics2D.OverlapCircle(isGroundChecker.position, checkGroundRadius, groundLayer);
        if (collider != null)
        {
            isGrounded = true;
            additionalJump = moreJumps;
            anim.SetBool("isjump", false);
        }
        else
        {
          if (isGrounded)
            {
                lastTimeGrounded = Time.time;
            }
            isGrounded = false;
            anim.SetBool("isjump", true);
        }
        CreateDust();
    }
    
    void BetterJump()
    {
        if (rb.velocity.y < 0)
        {
            rb.velocity += Vector2.up * Physics2D.gravity * (fallMultiplier - 1) * Time.deltaTime;
        } 
        else if (rb.velocity.y > 0 && !Input.GetKey(KeyCode.Space)) 
        {
            rb.velocity += Vector2.up * Physics2D.gravity * (lowJumpMuliplier - 1) * Time.deltaTime;
        }
    }

  private void Flip(float x)
    {
       if ((x > 0 && !facingRight) ||(x < 0 && facingRight))
      {
           facingRight = !facingRight;
            Vector3 theScale = transform.localScale;
         theScale.x *= -1;
         transform.localScale = theScale;
      }
        CreateDust();
    }

    void CreateDust()
    {
       Dust.Play();
    }
}
